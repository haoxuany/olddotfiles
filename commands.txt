
	Commands to integrate in workflow:
		Choose vU over gUl for single letter upcase
		:x | Same as :wq
		:put/pu {reg} | Put reg contents AFTER line, useful for macro editing
		:e! | Reload file(used to discard changes and argdo all files)
		gi | Goes back to last insert position and continue modifying
		g; | Move to previous change location 
		g, | Move to next change location
		<c-f> | Switch from Command-Line mode to Command-Line window 
		@: | Repeat last ex command
		:w !{prog} | Write to external pipe
		:r !{prog} | Read from external pipe
		Symbols $, ., 'm | Last line of file, current line, mark m ('< for visual start)
		:t, :m | Copy TO, MOVE to
		"[1-9], "", "_ | Delete history register, Unnamed register, Black hole register
		"+, "* | System clipboard register(Good for cutting), Primary register(used with middle mouse click)
		gp, gP | Putting without cursor movement
		<c-r><c-w> | Paste current word under cursor, also completes search
		<c-r>/ | The last search register
		~, &, g&, :&& | Last replacement field, last flags, substitute last everything, substitute last everything on range 
		:g/{regex}/[range] {cmd} | Apply cmd on all match regexes (can specify range, use :v for inversion)
		:g /{start}/ .,{finish} {cmd} | Specialized range form, places cursor at {start} and executes from .(now) to {finish}
		<c-e> | Exit from autocomplete
		<c-x><c-l>, <c-x><c-f> | Line autocompletion and filename autocompletion(remember to set relative path and cd - back) 
		<c-x><c-e> in bash | Edit command with vim
		gm | Go to middle of screen line
		g* | Partial match, search as if word is entered
		gd, gD | Go to local/global declaration
		^, $ | Start/end of line
		\t | <Tab>
		\r | <CR>
		<c-v> | Insert characters literally
		<c-b> | Cursor to the beginning of command-line (Not <c-a>)
		gJ | Join without inserting spaces
		K | Keyword lookup using 'keywordprg'
		ga, g8 | Show ascii/utf8 encoding
		vim - | Read file from stdin
		:enew | Edit empty buffer
		<c-w>_ | Maximize height
		<c-w>x | Exchange current window with the next
		zf | Make fold
		zd | Delete fold
		za | Toggle folding
		zi | Invert 'foldenable'
		zx | Recompute fold, when 'syntax' closes all folds
		zj,zk | Move one fold at a time
		<c-t> | Pop Tag from stack

	Regexes:(use verymagic \v)
		<, > | Word boundaries
		zs, \ze | Selection boundaries
		=@reg | Eval vimscript : write contents of register
		=submatch(0) | Eval vimscript : all of substitute match field
		=escape(@reg, getcmdtype().'') | Autoescapes / and ? when searching 
		(), \[1-9], %() | Capture and reference, uncapture
		s | whitespace
		w | Almost C-style word, used with \w+
		_x, \r | x character class with EOL, <CR>
		//e | Offset :s, last character of search pattern, could be used as motion
